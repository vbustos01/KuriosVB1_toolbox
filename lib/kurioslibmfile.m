function [methodinfo,structs,enuminfo,ThunkLibName]=kurioslibmfile
%KURIOSLIBMFILE Create structures to define interfaces found in 'KURIOS_COMMAND_LIB'.

%This function was generated by loadlibrary.m parser version  on Sat Jul 24 21:58:29 2021
%perl options:'KURIOS_COMMAND_LIB.i -outfile=kurioslibmfile.m -thunkfile=KURIOS_COMMAND_LIB_Win64_thunk_pcwin64.c -header=KURIOS_COMMAND_LIB.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'KURIOS_COMMAND_LIB_Win64_thunk_pcwin64');
% int common_List ( unsigned char * serialNo ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='common_List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% int common_Open ( char * serialNo , int nBaud , int timeout ); 
fcns.thunkname{fcnNum}='int32cstringint32int32Thunk';fcns.name{fcnNum}='common_Open'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% int common_IsOpen ( char * serialNo ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='common_IsOpen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int common_Close ( int hdl ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='common_Close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int kurios_Get_ID ( int hdl , unsigned char * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='kurios_Get_ID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
% int kurios_Get_Specification ( int hdl , int * max , int * min ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='kurios_Get_Specification'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int kurios_Get_OpticalHeadType ( int hdl , unsigned char * filterSpectrumRange , unsigned char * availableBandwidthMode ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='kurios_Get_OpticalHeadType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% int kurios_Set_OutputMode ( int hdl , int value ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='kurios_Set_OutputMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int kurios_Get_OutputMode ( int hdl , int * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='kurios_Get_OutputMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int kurios_Set_BandwidthMode ( int hdl , int value ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='kurios_Set_BandwidthMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int kurios_Get_BandwidthMode ( int hdl , int * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='kurios_Get_BandwidthMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int kurios_Set_Wavelength ( int hdl , int value ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='kurios_Set_Wavelength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int kurios_Get_Wavelength ( int hdl , int * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='kurios_Get_Wavelength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int kurios_Set_SequenceStepData ( int hdl , int index , int wavelength , int interval , int bandwidthMode ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='kurios_Set_SequenceStepData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int kurios_Get_SequenceStepData ( int hdl , int index , int * wavelength , int * interval , int * bandwidthMode ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='kurios_Get_SequenceStepData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int kurios_Get_AllSequenceData ( int hdl , unsigned char * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='kurios_Get_AllSequenceData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
% int kurios_Set_InsertSequenceStep ( int hdl , int index , int wavelength , int interval , int bandwidthMode ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='kurios_Set_InsertSequenceStep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int kurios_Set_DeleteSequenceStep ( int hdl , int value ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='kurios_Set_DeleteSequenceStep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int kurios_Set_DefaultWavelengthForSequence ( int hdl , int value ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='kurios_Set_DefaultWavelengthForSequence'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int kurios_Get_DefaultWavelengthForSequence ( int hdl , int * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='kurios_Get_DefaultWavelengthForSequence'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int kurios_Set_DefaultBandwidthForSequence ( int hdl , int value ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='kurios_Set_DefaultBandwidthForSequence'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int kurios_Get_DefaultBandwidthForSequence ( int hdl , int * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='kurios_Get_DefaultBandwidthForSequence'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int kurios_Set_DefaultTimeIntervalForSequence ( int hdl , int value ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='kurios_Set_DefaultTimeIntervalForSequence'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int kurios_Get_DefaultTimeIntervalForSequence ( int hdl , int * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='kurios_Get_DefaultTimeIntervalForSequence'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int kurios_Get_SequenceLength ( int hdl , int * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='kurios_Get_SequenceLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int kurios_Get_Status ( int hdl , int * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='kurios_Get_Status'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int kurios_Get_Temperature ( int hdl , double * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='kurios_Get_Temperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int kurios_Set_TriggerOutSignalMode ( int hdl , int value ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='kurios_Set_TriggerOutSignalMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int kurios_Get_TriggerOutSignalMode ( int hdl , int * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='kurios_Get_TriggerOutSignalMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int kurios_Set_ForceTrigger ( int hdl ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='kurios_Set_ForceTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
methodinfo=fcns;